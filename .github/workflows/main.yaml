name: Deploy Infra y Nginx

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: cluster-PIN 
  NODE_TYPE: t3.medium
  NODE_COUNT: 2
  AMI_ID: ami-0261755bbcb8c4a84  # AMI ID for Ubuntu 20.04 LTS in us-east-1

jobs:
  Credenciales:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Generate SSH key
      run: |
        ssh-keygen -t rsa -b 4096 -f jenkins.pem -N ""
        mv jenkins.pem.pub jenkins.pub

    - name: Upload SSH key
      uses: actions/upload-artifact@v3
      with:
        name: ssh-key
        path: |
          jenkins.pem
          jenkins.pub

    - name: Upload CloudFormation template
      uses: actions/upload-artifact@v3
      with:
        name: cloudformation-template
        path: cloudformation/ec2-stack.yaml

  Deploy_CloudFormation:
    needs: Credenciales
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.ec2-ip.outputs.ec2_ip }}
    steps:      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download SSH key
      uses: actions/download-artifact@v3
      with:
        name: ssh-key

    - name: Download CloudFormation template
      uses: actions/download-artifact@v3
      with:
        name: cloudformation-template
        path: cloudformation

    - name: Deploy CloudFormation stack
      id: deploy-cfn     
      run: |
        aws cloudformation deploy \
          --template-file cloudformation/ec2-stack.yaml \
          --stack-name jenkins-ec2-stack \
          --parameter-overrides \
            KeyName=jenkins \
            PublicKeyMaterial="$(cat jenkins.pub)" \
            InstanceType="${{ env.NODE_TYPE }}" \
            AMI="${{ env.AMI_ID }}" \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM
      
      env:
        NODE_TYPE: ${{ env.NODE_TYPE }}
        AMI_ID: ${{ env.AMI_ID }}

    - name: Get EC2 Public IP
      id: ec2-ip
      run: |
        EC2_IP=$(aws cloudformation describe-stacks --stack-name jenkins-ec2-stack --query "Stacks[0].Outputs[?OutputKey=='EC2PublicIP'].OutputValue" --output text)
        echo "ec2_ip=$EC2_IP" >> $GITHUB_OUTPUT

    - name: Wait for EC2 instance to be ready
      run: |
        echo "Waiting for EC2 instance to be ready..."
        timeout 300 bash -c 'until nc -z ${{ steps.ec2-ip.outputs.ec2_ip }} 22; do sleep 5; done'

    - name: Setup AWS credentials on EC2
      run: |
        chmod 600 jenkins.pem
        ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@${{ steps.ec2-ip.outputs.ec2_ip }} '
        mkdir -p ~/.aws
        echo "[default]
        aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        region=${{ env.AWS_REGION }}" > ~/.aws/credentials
        '
    - name: Upload SSH key and connection info
      uses: actions/upload-artifact@v3
      with:
        name: ssh-key-and-info
        path: |
          jenkins.pem

  Conexion_EC2:
    needs: Deploy_CloudFormation
    runs-on: ubuntu-latest
    outputs:
      cluster_name: ${{ steps.cluster_info.outputs.cluster_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
    
      - name: Download SSH key
        uses: actions/download-artifact@v3
        with:
          name: ssh-key
        
      - name: Set permissions for SSH key
        run: chmod 600 jenkins.pem
        
      - name: Configure AWS credentials on EC2
        run: |
          ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@${{ needs.Deploy_CloudFormation.outputs.ec2_ip }} '
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region=${{ env.AWS_REGION }}" > ~/.aws/credentials
          '
        
      - name: Connect to EC2 and setup cluster
        run: |
          # Instalar tmux en la instancia EC2
          ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@${{ needs.Deploy_CloudFormation.outputs.ec2_ip }} 'sudo apt-get update && sudo apt-get install -y tmux'
                  
          # Copiar el script a la instancia EC2
          scp -i jenkins.pem -o StrictHostKeyChecking=no ec2_user_data.sh ubuntu@${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}:~/ec2_user_data.sh
                
          # Ejecutar el script en una sesión tmux
            ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@${{ needs.Deploy_CloudFormation.outputs.ec2_ip }} '
            chmod +x ~/ec2_user_data.sh
            tmux new-session -d -s setup_session "sudo -E ~/ec2_user_data.sh > ~/setup.log 2>&1"
            '
                 
          # Esperar a que el script termine (ajusta el tiempo según sea necesario)
            echo "Esperando que el script termine..."
            sleep 600  # 10 minutos
                  
          # Verificar el estado del script
            ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@${{ needs.Deploy_CloudFormation.outputs.ec2_ip }} '
            if tmux has-session -t setup_session 2>/dev/null; then
              echo "El script aún está en ejecución"
            exit 1
            else
              echo "El script ha terminado"
              cat ~/setup.log
            fi
            '
        env:
          CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
          AWS_REGION: ${{ env.AWS_REGION }}
          NODE_TYPE: ${{ env.NODE_TYPE }}
          NODE_COUNT: ${{ env.NODE_COUNT }}
        
      - name: Get cluster info
        id: cluster_info
        run: |
          CLUSTER_NAME=$(ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@${{ needs.Deploy_CloudFormation.outputs.ec2_ip }} 'echo $CLUSTER_NAME')
          echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
        
  Deploy_Nginx:
      needs: [Deploy_CloudFormation, Conexion_EC2]
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download SSH key
        uses: actions/download-artifact@v3
        with:
          name: ssh-key
        
      - name: Set permissions for SSH key
        run: chmod 600 jenkins.pem
        
      - name: Deploy Nginx
        run: |
                EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
                ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
                kubectl apply -f ~/nginx-deployment.yaml
                kubectl apply -f ~/nginx-service.yaml
                '
        
      - name: Wait for Nginx deployment
        run: |
                EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
                ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
                kubectl wait --for=condition=available --timeout=300s deployment/nginx-deployment
                '
        
  Deploy_Monitoring:
      needs: [Deploy_CloudFormation, Conexion_EC2, Deploy_Nginx]
      runs-on: ubuntu-latest
      outputs:
        grafana_url: ${{ steps.grafana_info.outputs.grafana_url }}
        grafana_password: ${{ steps.grafana_info.outputs.grafana_password }}
      steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download SSH key
        uses: actions/download-artifact@v3
        with:
          name: ssh-key
        
      - name: Set permissions for SSH key
        run: chmod 600 jenkins.pem
        
      - name: Deploy Prometheus and Grafana
        run: |
                EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
                ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
                kubectl create namespace monitoring
                helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                helm repo add grafana https://grafana.github.io/helm-charts
                helm repo update
                helm install prometheus prometheus-community/prometheus \
                  --namespace monitoring \
                  --set alertmanager.persistentVolume.storageClass="gp2" \
                  --set server.persistentVolume.storageClass="gp2"
                helm install grafana grafana/grafana \
                  --namespace monitoring \
                  --set persistence.storageClassName="gp2" \
                  --set persistence.enabled=true \
                  --set adminPassword="adminPIN" \
                  --values grafana-values.yaml
                '
        
      - name: Wait for Prometheus and Grafana
        run: |
                EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
                ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
                kubectl wait --for=condition=available --timeout=300s deployment/prometheus-server -n monitoring
                kubectl wait --for=condition=available --timeout=300s deployment/grafana -n monitoring
                '
        
      - name: Get Grafana Info
        id: grafana_info
        run: |
                EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
                GRAFANA_URL=$(ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP 'kubectl get svc -n monitoring grafana -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"')
                GRAFANA_PASSWORD=$(ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP 'kubectl get secret --namespace monitoring grafana -o jsonpath="{.data.admin-password}" | base64 --decode')
                echo "grafana_url=http://$GRAFANA_URL" >> $GITHUB_OUTPUT
                echo "grafana_password=$GRAFANA_PASSWORD" >> $GITHUB_OUTPUT
  
  Deploy_EFK:
    needs: [Deploy_CloudFormation, Conexion_EC2, Deploy_Nginx]
    runs-on: ubuntu-latest
    outputs:
      kibana_url: ${{ steps.kibana-url.outputs.kibana_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download SSH key
      uses: actions/download-artifact@v3
      with:
        name: ssh-key

    - name: Set permissions for SSH key
      run: chmod 600 jenkins.pem

    - name: Deploy EFK Stack
      run: |
        EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
        scp -i jenkins.pem -o StrictHostKeyChecking=no kubernetes/*.yaml scripts/deploy-efk.sh ubuntu@$EC2_IP:~
        ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP 'bash deploy-efk.sh'

    - name: Get Kibana URL
      id: kibana-url
      run: |
        EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
        KIBANA_URL=$(ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
          kubectl get service kibana -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"
        ')
        echo "kibana_url=http://$KIBANA_URL" >> $GITHUB_OUTPUT

  Create_Connection_Info:
    needs: [Deploy_CloudFormation, Deploy_Nginx, Deploy_EFK, Conexion_EC2, Deploy_Monitoring]
    runs-on: ubuntu-latest
    steps:
      - name: Create connection info
        run: |
          cat <<EOF > connection_info.txt
          EC2 Public IP: ${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
          Nginx Service URL: ${{ needs.Deploy_Nginx.outputs.nginx_url }}
          Kibana URL: ${{ needs.Deploy_EFK.outputs.kibana_url }}
          URL de Grafana: ${{ needs.eploy_Monitoring.outputs.grafana_url }}
          Contraseña de Grafana: ${{ needs.eploy_Monitoring.outputs.grafana_password }}
          To connect via SSH: ssh -i jenkins.pem ubuntu@${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
          EOF

      - name: Upload connection info
        uses: actions/upload-artifact@v3
        with:
          name: connection-info
          path: connection_info.txt

  Final_Setup:
    needs: [Create_Connection_Info]
    runs-on: ubuntu-latest
    steps:
      - name: Download connection info
        uses: actions/download-artifact@v3
        with:
          name: connection-info
      - name: Display final connection info
        run: cat connection_info.txt
      - name: Upload final connection info
        uses: actions/upload-artifact@v3
        with:
          name: connection-info
          path: connection_info.txt

  Download_Kubeconfig:
    needs: [Deploy_CloudFormation, Conexion_EC2, Deploy_Nginx]
    runs-on: ubuntu-latest
    steps:
    - name: Download SSH key
      uses: actions/download-artifact@v3
      with:
        name: ssh-key

    - name: Set permissions for SSH key
      run: chmod 600 jenkins.pem

    - name: Download kubeconfig
      run: |
        EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
        scp -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP:~/.kube/config ./kubeconfig

    - name: Upload kubeconfig as artifact
      uses: actions/upload-artifact@v3
      with:
        name: kubeconfig
        path: ./kubeconfig